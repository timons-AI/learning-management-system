// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch", "fullTextIndex"]
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
  // url      = env("LOCAL_URL")
  // url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String       @db.Text
  description String?      @db.Text
  imageUrl    String?      @db.Text
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category?    @relation(fields: [categoryId], references: [id])
  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  // @@index([categoryId])
  // @@fulltext([title])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  courseId  String
  name      String
  url       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId   String
  isCompleted Boolean @default(false)

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// will be populated with seed.ts periodically meaning only add new tokens to the end of the list

model Token {
  id            String   @id @default(uuid())
  userId        String?
  tokenCustomer String // this can be a user name email, or id 
  token         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// rules for tokens 
// token can only be used once
// token can only be used by one user
// token can only be used for one course
// once the userId is assigned to the token, the token cannot be used again
// when the token is used, the user is assigned to the token, and the token is marked as used
// when the token is used, the user is assigned to the purchase, and the course is added to purchase table 
// validation to check if the token is valid, if it is valid, then the user can use it to purchase the course

// example token data json would be 
// {
//   "token": "123456",
//   "userId": "123456",
//   "courseId": "123456"
// }
